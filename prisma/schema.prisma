// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String   @id @default(uuid())
  firstName                String
  lastName                 String
  email                    String   @unique
  phoneNumber              String   @unique
  companyName              String
  companySiret             String
  companyAddressNumber     String
  companyAddressStreet     String
  companyAddressAdditional String?
  companyAddressCity       String
  companyAddressZipCode    String
  companyAddressCountry    String
  role                     Role     @default(USER)
  passwordHash             String
  signedUpAt               DateTime @default(now())
  orders                   Order[]
  files                    File[]
  logs                     Log[]
  storage                  Int      @default(0)
  havePaid                 Boolean  @default(false)
}

model Order {
  id                      String   @id @default(uuid())
  orderNumber             Int   @unique @default(autoincrement())
  quantity                Int
  unitPriceExcludingTaxes Float
  vat                     Float
  createdAt               DateTime @default(now())
  user                    User     @relation(fields: [userId], references: [id])
  userId                  String
  fileId                  String?
}

model File {
  id            String   @id @default(uuid())
  slugName      String
  displayName   String
  serverPath    String
  folderPath    String
  uploadedAt    DateTime @default(now())
  extension     String
  sizeBytes     Int
  isPinned      Boolean  @default(false)
  isDeleted     Boolean  @default(false)
  thumbnailPath String?
  type          FileType
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model Log {
  id            String     @id @default(uuid())
  type          ActionType
  message       String?
  logDate       DateTime   @default(now())
  ipAddressHash String
  user          User?      @relation(fields: [userId], references: [id])
  userId        String?
}

enum Role {
  USER
  ADMIN
}

enum FileType {
  INVOICE
  USER_FILE
}

enum ActionType {
  FILE_UPLOAD
  FILE_RENAME
  FILE_DELETE
  FILE_RESTORE
  FILE_PIN
  FILE_UNPIN
  FILE_DOWNLOAD

  USER_LOGIN_SUCCESS
  USER_LOGIN_FAIL
  USER_LOGOUT
  USER_SIGNUP
  USER_EMAIL_CONFIRM
  USER_PASSWORD_RESET_REQUEST
  USER_PASSWORD_RESET
  USER_UPDATE
  USER_DELETE

  ORDER_CREATE
  ORRDER_PAY_SUCCESS
  ORDER_PAY_FAIL
}
